import csv
# Initialize an empty dictionary
data_dict = {}

# Open the text file
with open('pslist.txt', 'r') as file:
    # Skip the first two lines
    next(file)
    next(file)

    # Read the column headers (third line) and split them into a list
    headers = file.readline().strip().split('\t')

    # Initialize lists for each column in the dictionary
    for header in headers:
        data_dict[header] = []

    # Read the lines 5 to 21 and populate the dictionary
    for _ in range(5, 23):
        line = file.readline().strip()
        if line:
            values = line.split('\t')

            # Add each value to the corresponding column's list in the dictionary
            for i in range(len(headers)):
                data_dict[headers[i]].append(values[i])

threads = [int(thread) for thread in data_dict["Threads"]]
length_pid = len(data_dict["PID"])
unique_count=len(set(data_dict["PPID"]))
avg_threads_per_process = sum(threads)/ length_pid
wow64_count = data_dict["Wow64"].count(1)
handles = [int(handle) for handle in data_dict["Handles"]]
avg_handles=sum(handles)/length_pid

my_list = []
my_list+=[length_pid,unique_count,avg_threads_per_process,wow64_count,avg_handles]

#dlllist

with open('dlllist.txt', 'r') as f:
    lines = f.readlines()

# skip any empty or whitespace-only lines
lines = [line for line in lines if line.strip()]

unique_pids = set(line.split()[0] for line in lines[1:])
num_dlls = len(lines) - 1
avg_dlls = num_dlls / len(unique_pids)
my_list+=[num_dlls,avg_dlls]


#handles


handle_dict = {
    'File': 0,
    'Section': 0,
    'Event': 0,
    'Key': 0,
    'Directory': 0,
    'Thread': 0,
    'Port': 0,
    'Desktop': 0,
    'Semaphore': 0,
    'Timer': 0,
    'Mutant': 0
}

handles = []
handleunique_pids = set()

with open('handles.txt', 'r') as f:
    next(f) # skip header line
    next(f)
    for line in f:
        handle = line.strip().split()
        pid = line.strip().split('\t')[0]

        # Add the PID to the set of unique PIDs
        handleunique_pids.add(pid)
        if len(handle) < 5:
            continue
        handles.append(handle)
        handle_type = handle[4]
        if handle_type in handle_dict:
            handle_dict[handle_type] += 1

total_handles = sum(handle_dict.values())
avg_handles_proc =total_handles/len(handleunique_pids)

my_list+=[total_handles,round(avg_handles_proc, 5),handle_dict['Port'],handle_dict['File'],handle_dict['Event'],handle_dict['Desktop'],handle_dict['Key'],handle_dict['Thread'],handle_dict['Directory'],handle_dict['Semaphore'],handle_dict['Timer'],handle_dict['Section'],handle_dict['Mutant']]

#ldrmodules

with open('ldrmodules.txt', 'r') as f:
    lines = f.readlines()
    inload_false = 0
    ininit_false = 0
    inmem_false = 0
    total = 0
    for line in lines[2:]:
        # Skip the first two lines that contain header information
        values = line.split()
        if len(values) < 6:
            # Skip lines that do not have the expected format
            continue
        if values[3] == 'False':
            inload_false += 1
        if values[4] == 'False':
            ininit_false += 1
        if values[5] == 'False':
            inmem_false += 1
        total += 1
my_list+=[inload_false,ininit_false,inmem_false,round(inload_false/total,5),round(ininit_false/total,5),round(inmem_false/total,5)]

#modules

with open('modules.txt', 'r') as f:
    module_lines = f.readlines()

module_count = len(module_lines)-4
my_list+=[module_count]


#callbacks

callbacks = []
with open('callback.txt','r') as f:
    # Skip the header line
    next(f)

    # Read each callback line and append it to the callbacks list
    for line in f:
        parts = line.strip().split()
        if len(parts) >= 3:
            callbacks.append({
                'Type': parts[0],
                'Module': parts[1],
                'Symbol': parts[2],
                'Detail': ' '.join(parts[3:])
            })

ncallbacks = len(callbacks)-1

my_list+=[ncallbacks]
filename = "final.csv"

with open(filename, mode="w", newline="") as file:
    writer = csv.writer(file)
    writer.writerow(my_list)

print(f"CSV file '{filename}' has been created.")
