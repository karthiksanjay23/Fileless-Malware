import sys
import requests
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QVBoxLayout, QWidget, QScrollArea
from PyQt5.QtGui import QColor, QPalette
from PyQt5.QtCore import QTimer, Qt
from subprocess import Popen

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        # Set the window background color to black
        self.setAutoFillBackground(True)
        palette = self.palette()
        palette.setColor(QPalette.Window, QColor(0, 0, 0))
        self.setPalette(palette)

        # Set the window title and size
        self.setWindowTitle('Scrolling Window')
        self.setGeometry(1120, 350, 800, 600)

        # Create a QVBoxLayout to hold multiple labels
        self.layout = QVBoxLayout()

        # Create a QWidget to hold the layout
        self.scroll_content = QWidget()
        self.scroll_content.setLayout(self.layout)

        # Create a QScrollArea and set the scroll content widget
        self.scroll_area = QScrollArea()
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setWidget(self.scroll_content)

        # Always show the scroll bars
        self.scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        self.scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOn)

        # Set the scroll area as the central widget
        self.setCentralWidget(self.scroll_area)

        # Keep track of the previous messages
        self.previous_messages = []

    def fetch_messages(self):
        url = 'http://optimus17410.pythonanywhere.com/upload'  # Modify the URL to include the /upload endpoint
        response = requests.get(url)
        print("Response status code:", response.status_code)
        print("Response content:", response.content)
        if response.status_code == 200:
            messages = response.json()
            print("Messages:", messages)
            new_messages = [message for message in messages if message not in self.previous_messages]
            print("New messages:", new_messages)
            for message in new_messages:
                label = QLabel(self)
                label.setStyleSheet("QLabel { color: white; }")  # Set text color to white
                label.setText(message)
                self.layout.addWidget(label)

            # Update the previous messages
            self.previous_messages = messages

        else:
            label = QLabel(self)
            label.setStyleSheet("QLabel { color: white; }")  # Set text color to white
            label.setText('Failed to fetch the messages')
            self.layout.addWidget(label)

        # Wait for a short duration before fetching messages again
        QApplication.processEvents()
        QTimer.singleShot(1000, self.fetch_messages)

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    window.fetch_messages()  # Start fetching messages
    sys.exit(app.exec_())
