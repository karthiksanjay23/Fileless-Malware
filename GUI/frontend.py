import sys
from PyQt5 import QtWidgets, uic, QtGui, QtCore
from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog, QProgressBar
import os
from PyQt5.QtGui import QPixmap, QCursor
import time
from flask import Flask, request
import requests
import threading
from PyQt5 import QtCore
from subprocess import Popen

url = 'http://optimus17410.pythonanywhere.com/upload'
data = '["Please Wait"]'
headers = {'Content-Type': 'application/json'}

try:
    response = requests.post(url, data=data, headers=headers)
    if response.status_code == 200:
        print('Request sent successfully!')
    else:
        print(f'Request failed with status code: {response.status_code}')
except requests.exceptions.RequestException as e:
    print(f'An error occurred: {str(e)}')

app = Flask(__name__)
app.config['MAX_CONTENT_LENGTH'] = 1024 * 1024 * 1024  # Set maximum file size to 1 GB (1024 MB)

BUCKET_NAME = 'csdmalbucket'
BUCKET_URL = f'https://{BUCKET_NAME}.s3.amazonaws.com'


class UploadThread(threading.Thread):
    def __init__(self, file_path):
        threading.Thread.__init__(self)
        self.file_path = file_path

    def run(self):
        print("Submitting dump to AWS:", self.file_path)
        file = open(self.file_path, 'rb')
        try:
            response = requests.put(f'{BUCKET_URL}/{os.path.basename(self.file_path)}', data=file)
            if response.status_code == 200:
                print('File uploaded successfully!')
            else:
                print(f'An error occurred: {response.text}')
        except Exception as e:
            print(f'An error occurred: {str(e)}')


class MainWindow(QMainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        uic.loadUi('pythonui.ui', self)

        self.show()

        self.resultlabel.setVisible(False)

        self.chooseFile.clicked.connect(self.select_file)
        self.addimage()
        self.Analyze.clicked.connect(self.analyze_and_submit)
        self.capturememory.clicked.connect(self.run_dump)  # Connect the button to the run_dump function

        # Find the progress bar widget from the Qt Designer file
        self.progress_bar = self.progressBar

        self.progress_bar.setVisible(False)  # Hide the progress bar initially

    def analyze_and_submit(self):
        self.Analyze.setEnabled(False)  # Disable the analyze button
        file_path = self.textbox.toPlainText()

        if file_path == "":
            self.resultlabel.setText("No file selected")  # Display message for no file selected
            self.resultlabel.setVisible(True)
            self.Analyze.setEnabled(True)  # Enable the analyze button
            return

        upload_thread = UploadThread(file_path)
        upload_thread.start()
        self.resultlabel.setText("Please Wait")  # Set the text to "Please Wait"
        self.resultlabel.setVisible(True)  # Show the result label
        self.run_progress_bar()

        # Execute new.py in parallel
        Popen(['python', 'new.py'])

    def run_progress_bar(self):
        self.progress_bar.setVisible(True)  # Show the progress bar

        self.progress_bar.setMaximum(300)  # Set the maximum value to 300 (5 minutes * 60 seconds)

        self.progress = 0
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.update_progress_bar)
        self.timer.start(1000)  # Update every 1000 milliseconds (1 second)

    def update_progress_bar(self):
        self.progress += 1
        self.progress_bar.setValue(self.progress)  # Update the progress bar value

        if self.progress >= 180:  # If 5 minutes have passed
            self.timer.stop()  # Stop the timer
            self.progress_bar.setVisible(False)  # Hide the progress bar
            self.Analyze.setEnabled(True)  # Enable the analyze button
            self.retrieve_json_data()

    def addimage(self):
        image_path = "/Users/Admin/Downloads/gui/background1.jpg"  # Update with the correct file path
        self.centralwidget.setStyleSheet(
            f"background-image: url({image_path}); background-repeat: no-repeat; background-position: center;")

        self.Analyze.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
        self.Analyze.setStyleSheet("QPushButton:hover { color: blue; }")
        self.chooseFile.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
        self.chooseFile.setStyleSheet("QPushButton:hover { color: blue; }")
        self.capturememory.setCursor(QCursor(QtCore.Qt.PointingHandCursor))
        self.capturememory.setStyleSheet("QPushButton:hover { color: blue; } background-color: white; color: black;")

    def select_file(self):
        file_dialog = QFileDialog()
        file_path, _ = file_dialog.getOpenFileName(self, "Select File", "", "Memory Files (*.vmem *.raw *.mem *.dmp)")
        if file_path:
            file_name = os.path.basename(file_path)
            self.textbox.setText(file_path)

    def retrieve_json_data(self):
        url = 'http://optimus17410.pythonanywhere.com/upload'  # Update with your Flask URL
        try:
            response = requests.get(url)
            if response.status_code == 200:
                json_data = response.json()
                if len(json_data) > 0:
                    output_element = json_data[0]
                    self.resultlabel.setText(output_element)
                else:
                    self.resultlabel.setText('No data available')
            else:
                self.resultlabel.setText('Error: Unable to retrieve JSON data')
        except Exception as e:
            self.resultlabel.setText(f'Error: {str(e)}')

    def run_dump(self):
        Popen(['python', 'dump.py'])  # Execute dump.py using Popen


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    sys.exit(app.exec_())
